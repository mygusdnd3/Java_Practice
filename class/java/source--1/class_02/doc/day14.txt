# day14

Object 클래스
==> 자바로 만든 클래스의 상위 super 클래스으 ㅣ역할을 하는 클래스이다.
	따라서 자바로 만든 모든 클래스는 Object 클래스가 제공하는
	모든 기능( 멤버 - 변수, 함수)를 자동적으로 사용할수 있게 된다.
	String toString()
	
	참고 ]
		이처럼 최상위 클래스를 만들어 놓은 이유는?
		계층 추적을 원할히 하도록 하기 위한 조치..
		즉, 각각의 클래스의 족보를 정확하게 따질 수 있도록 하기 위해서..
		단군할아버지...?..
		오브젝트 클래스는 모든 클래스를 다 받을숭있다.
		
		
	참고 ]
	
		자바로 만든 모든 클래스는 반드시 상위 클래스를 가지고 있다.
		지금까지 만든 클래스들도 상위 클래스를 가지고 있다.
		만약 강제로 상위 클래스를 지정하지 않으면
	*** 묵시적으로 Object 라는 클래스를 상속받아서 만들어 진다.
	
	
	is a 상속관계에있느냐
	has a  가지고있느냐 멤버로다가
***	
	instanceof
	==> 특정 클래스를 new 시키면 주소가 만들어 지는데
		이 주소가 어떤 클래스 소속인지를 알아내는 연산자이다.
		연산의 결과는 true, false (논리값)으로 나오게 된다..
		
		형식 ]
		
			주소	instanceof	클래스이름
		
		의미 ]
			주소가 가리키는 곳의 내용이 
			지정한 클래스의 소속인지를 물어보는 것
			( 클래스 이름의 인스턴스냐?)
			
		참고 ]
			소속이라는 개념은 is a 관계를 따져주는 것이다.
			상속관계를 따지는 개념이 소속이 된다.
		
--------------------------------------------------------------------------------


	class Grand{
		void abc(){
			System.out.println("여기는 할아버지 함수");
		
		}	
	}
	
	Class Father	extends Grand{
		void abc(){
			System.out.println("여기는 아부지함수");
		}
		void xyz(){
			System.out.println("여기는 아부지xyz함수");
		}
	}
	
	class Son extends Father{
	
		void xyz(){
			System.out.println("여기는 아들이 고침");
		}
		
		void zzz(){
		
		}
	}
	
	class GrandChild extends Son{
		void abc(){
			System.out.println("여기는 아들의 아들이 고쳐씀");
		}
	}
	Son 까지만 본다 제일 마지막에 오버라이딩한 함수를 호출한다.
	
	Grand g = new Son();
	g.xyz(); -------------------- X   	: Gand의 멤버로 xyz()가 없다.
	g.abc(); -------------------- O 	: 아부지가 함수를 수정해 놓았고 아들은 수정하지 않고 그대로 사용
										  그런데 함수의 경우는 인스턴스쪽의  제일 마지막에 오버라이딩한 함수를 
										  호출하게 된다. 따라서 아버지가 수정한 함수가 호출된다.
										  맨 마지막으로 고쳐쓴 함수가 호출 -아부지꺼
										  
										  
--------------------------------------------------------------------------------

package 와 import

	package란?
		==> 쉽게 이야기 하자면
			자바 프로그램(솟스)가 들어있는 폴더를
			자바에서 부르는 용어를 말한다.
			
			예 ]
				윈도우에서 D 드라이브의 data라는 폴더의 test.txt라는 파일은
					d:\data\test.txt
				라고 표현하는데
				
				자바에서는
					data.test.txt
					
				라고 표현을 하고
				애때 data가 패키지라고 부를수 있게 된다.
				
			자바는 오픈소스이다.
			따라서 모든 사람이 자신이 만든 프로그램을 제공할 수 있고
			그것을 모든 사람이 이용할 수 있는 프로그램이다.
			그러다보니 문제가 발생하는데
				클래스의 이름이 충돌나는 경우가 생긴다.
				
			이런 문제를 해결하기 위해서 만들어 놓은 한가지 방법이
			바로 패키지이다.
			
			즉, 소스코드를 만드는 사람이 그 프로그램이 포함되는 폴더 이름까지
			정해서 프로그램을 만들도록 하는 것.
			
			결론 ]
				자바로 프로그램을 만들때는 반드시 그 프로그램이
				어떤 폴더에 저장되는지를 알려주도록 해 놓았다.
				
			작성하는 규칙 ] 
			
				package	폴더이름.폴더이름....;
				
		참고 ] 
			패키지 이름을 만드는 권고사항
				자신이 사용하는 도메인을 역순으로 나열한 후
				그 이후에 다시 폴더 이름을 붙여주세요.
				
				예]
					www.increpas.com
					
					==>패키지이름
						com.increpas.www.폴더이름
						
						
						
--------------------------------------------------------------------------------

import란

	=> 자신이 사용할 클래스가 어느 폴더(패키지)에 있는 클래스를
		사용할지를 밝혀주기 위한 명령
		
		
		예 ]
			내가
				Test.class
				가 SAMPLE 이라는 폴더에 저장된 클래스이고
				
				Test.class
				가 TEST 라는 폴더에 저장된 클래스라면
				
				test.class 를 new 시킬껀데 어떤 폴더의 클래스를 new 시킬것인가???
				==> 이것을 해결하기 위한 명령이 import이다.
				
		형식 1]
		
			import 패키지 경로.클래스이름;
			==> 지정한 폴더에 있는 클래스를 사용할 예정임을 밝혀주는것.
			
		형식 2]
			import 패키지 경로.*
			==> 지정한 폴더(패키지)에 있는 모든 클래스를 사용할 예정임을
				밝혀주는 것
				
			예 1]
			 increpas										  
				Test01.class
				Test02.class
				sample
					test01.class
					
			import increpas.*;
			인크레파스 소속의 직접 소속이 되어 있는
			==> Test01.class, Test02.class만 사용 가능하도록 밝혀주는 것이 된다.
				하위 패키지의 클래스(sample)는 사용할 수 없다.
				폴더안의 폴더는 안본다 시발것
				
				
			예 2]
				import increpas.*;
				import increpas.sample.Test01;
				
				Test01  t1 = new Test01();
				
				이경우는 명시적으로 클래스가 명시된것이 new가된다.
				
				
				참고 ]
					명시적으로 클래스를 import 하는 경우가 우선 하게 된다.
					따라서 sample.Test01을 new 시킨 결과가 된다.
				
				
		참고 ] 
			import 하지 않아도
			명시적으로 클래스 이름 앞에 패키지 이름을 붙여서 사용할 수도 있다.
			
			increpas.Test02 t1 = new increpas.Test01();
			
		참고 ]
			유일하게 java.lang 패키지는 import 하지 않아도 사용할 수 있다.
			왜?
			JVM이 기본적으로 찾아보는 패키지이기 때문에..
			
		참고 ]
			import를 하게 되면 해당 패키지 소속의 클래스만 사용 가능하도록하게 된다.
			하위 패키지나 상위 패키지는 포함시키지 않는다.
			
------------------------------------------------------------------------------------

static import
==> static 멤버는 원칙적으로
	클래스이름. 멤버
	의 형식으로 사용한다.
		예]
			Math.random()
			Math.PI
			
			이때, static 멤버 앞에 사용하는 클래스 이름 조차도 생략 할 수 있다.
			
			==> 이처럼 static 멤버를 사용할 때
				이름을 생략 하도록 하는 방법이 
					static import
					이다.
					
				형식 ]
				
					import static 패키지이름.클래스이름.*;
					
		
------------------------------------------------------------------------------------

final 속성

	1. final class
		==> 이 클래슨 더이상 상속이 불가능한 클래스임을 밝히는 속성
			기능을 추가 또는 변경하지 말고 
			있는 기능 그대로 사용 하라는 의미의 클래스이다.
	
	2. final 함수
		==> 이 함수는 오버라이드가 불가능한 함수이다.
			다시말해서 고쳐 쓸 수 없는 함수이다.
			따라서 이 함수는 매우 중요한 함수이므로
			함부로 기능을 바꾸지 말고 현재 기능 그대로 사용 하세요.
	
	3. final 변수
		==> 이 변수는 값을 수정할 수 없는 변수이다.
			즉, 현재 값을 유지해야만 하는 변수이다.
			이 경우 선언과 동시에 초기화가 되어야 한다.
			
------------------------------------------------------------------------------------

*** 접근 지정자 ***

	==> 그 내용을 누구까지 사용 하게 할 수 있는지를 지정하는 예약된 용어
		즉, 우리가 클래스를 만든닥 해서 그 클래스(내용)가 모든 클래스에게
		공개 되는 것은 아니다. 
		클래스를 제작하는 사람이 사용 범위를 지정할 수 있다.
		
		예 ]
			class를 어디까지 이 클래스를 사용할 수 있도록 할 것인지..
			new 시킬 수 있도록 할 것인지..
			
			함수는 , 어디까지 이 함수를 호출할 수 있도록 할 것인지.
			
		종류]
		
		1. public
			==> 모든 곳에서 사용 할 수 있다.
		2. protected
			==> 상속받은 하위 클래스 + 같은 패키지 내에서만 사용 가능하다
		3. defualt(생략)	- 접근지정자를 사용하지 않는 경우
			==> 같은 패키지 내의 모든 클래스에서는 사용 가능하다.
		4. private
			==> 같은 클.래.스 내에서만 사용 가능하다.
			
		참고 ]
			클래스는 public 과 생략만 접근 지정자로 사용한다.
			
		참고 ] 
			클래스의 접근 지정의 의미는 클래스 자체를 사용할지 여부를 지정하는 것이고
			생성자 함수의 접근 지정의 의미는 new 를 시킬수 있는지 여부를 정하는 것이다.
			
			
------------------------------------------------------------------------------------

*** 은닉화 ***
	프로그램에 있어서 가장 중요한 요소는 데이터이다.
	즉, 변수가 프로그램의 핵심적인 요소가 될 것이다.
	이때 무결성 데이터를 유지할 수 있는 것이 가장 중요한 개념이 될 것이다.
	
	은니고하란?
	이처럼 중요한 요소인 변수를 사용자가 함부로 변경하지 못하도록
	(결점이 있는 데이터가 오지 못하도록 하는것)
	방지하는 기술을 은닉화라 한다.
	
	방법 ]
	
		1. 중요한 데이터가 기억될 변수는
			private로 접근 지정자를 지정한다.
			==> 외부 클래스에서 이 변수를 열람과 변경을 하지 못한다.
		2. 대신 이 변수의 값을 변경하거나 , 데이터의 통로를 만들어 놓는다.

------------------------------------------------------------------------------------

함수의 오버라이딩 규칙
	0.	상속 받아야 한다.
	1. 함수의 원형은 유지한다.
	2. 접근지정자는 같거나 넓은 방향으로
	3. 예외처리는 같거나 좁은 방향으로..
		
		접근지정자의 범위
			public(모든) > protected(패키지+상속) > 생략(패키지) > private(클래스내부)
			
	
		