# day11

객체지향언어(Object oriented Programming : OOP)
==> 객체를 이용해서 프로그램을 만들어 나가는 언어

클래스란?
	==> 하나의 목적을 달성하기 위해서 필요한 기능을 모아놓은
		프로그램의 가장 작은 단위
		
		참고 ]
			기능의 가장 작은 단위는 함수이다.
			
			
		예 ]
		
			문자열을 관리하겠다. ==> String
			네트워크 작업을 해야겠다. ==> Socket
			많은 양의 데이터를 한꺼번에 보관하고 관리하고 싶다. 
				==> Collection, ArrayList, HashSet, TreeMap...
				
			
		따라서 클래스를 이루는 구성 요소(맴버)는
			1. 변수 : 필요한 데이터를 기억(보관)하고 있어야 한다.
			2. 함수 : 어떤 문제를 해결하기 위한 기능이 있어야 한다.
			
			
-------------------------------------------------------------------------------------------
			
		클래스를 만드는 방법

			[접근지정자] [속성]ox class(예약어)  클래스이름{
					
				변수 선언;
					
				함수 선언(){
				}
				...
			}
			
-------------------------------------------------------------------------------------------

***
문제는 이 클래스는 설계도에 불과하다.
즉, 클래스만 가지고 있다고 해서 이것이 실행되는 것은 아니다.
반드시 클래스가 실행 가능한 물건으로 탄생 되어야 한다.( ==> 메모리에 데이터가 올려져야한다)

이처럼 클래스를 실행 가능한 물건으로 만든 것을 "Object(객체)"다 라고 표현한다.

결론 ] 

	객체지향 언어는
	클래스를 기반으로 만들어진 Object를 가지고
	만들어지는 프로그램 언어 이다.
	
쉽게 정의하자면 ]
	
		==> 설계도는 이미 엄청나게 많이 준비되어 있다. ( 클래스 )
			이것들을 적절한 위치에 조립해서 
			목적하는 프로그램을 만들어 나가는 기법
			
-------------------------------------------------------------------------------------------

객체(Object)를 만드는 방법
==> 객체는 JVM이 만들어 준다.
	개발자는 필요한 부품을 만들어 달라고 명령만 내리면 된다.
		
	클래스이름 변수;
	변수 = new 클래스이름(); -생성자 호출
	변수 = new 클래스이름(데이터);
	
	예 ]
		Test라는 클래스가 존재한다면..
		
		Test t;; //변수 선언. 이 변수는 래퍼런스변수가 된다. 이 변수의 Heap Type은 Test 타입이 된다.
		
		t = new Test();
			// new 명령을 통해서 클래스가 Object가 되는데
			// 컴퓨터가 물건을 만든다는 개념
			// ==> 메모리에 클래스를 올린다.
			
		둘을 합쳐보면
		
			Test t	    =	 new Test();
			레퍼런스 	+	 인스턴스			= Object
		
			
	
	예 ]
		
		class Test{
			int a;
			float b;			Heap에 만들어진 기본형 데이터는 자동 초기화
			char c;
			
			int getA(){
				
				return a;
			
			}
		void setA(int a){
			this.a = a;
			}
		}
		
		==> 사용할 때
		
		Test t ; // 변수 선언하고
		t = new Test(); // 변수 초기화
		
		Test t1 = new Test();
		
		// 클래스의 내용이 모두 힙에 올려져 있고
		// 힙의 주소를 t가 기억하고 있으므로
		// t에 접근하면 Test클래스의 내용을 사용할 수 있게된다.
		
		t.getA();  ==>  0
		t.setA(20);
		t.getA(); ==> 20;
		
		t1.getA(); ==> 0
		
		
		
-------------------------------------------------------------------------------------------

객체 사용 방법
==> 객체를 사용한다는 개념은
	그 목적을 달성하기 위해서 필요한 데이터(변수)를 기억하던지
	그 목적을 달성하기 위해서 필요한 기능(함수)을 수행하던지..
	
	사용 방법 ]
	
		주소.변수
		주소.함수()
		
		주소 : 인스턴스의 주소를 가리키고 그 주소는 레퍼런스 변수가 기억하고있다.
		
				따라서 레퍼런스(변수)를 사용하면 된다.
				
							t.setA(20);
							t.a; == 20;
							t.b; == 0.0;
						
							t.getA();  

				
		
		****
		주의 ] 
			자바에서는 소속을 밝혀줄때 사용하는 기호는 '.' 을 이용해서 표현한다.
			
	참고 ] 
		클래스 하나당 오브젝트는 복수개 만들어도 상관없다		
		즉, 설계도는 한장만 있으면 되는데
		설계도 한장으로 물건은 여러개 만들 수 있다.
		이때 주소를 이용해서 사용하게 되므로
		각각의 오브젝트는 벼개로 독립되어서 실행 될 수 있다.
		
	참고 ]
		
		지역변수
		==> 해당 지역(블럭)에서만 사용할 수 있는 변수로
			그 문장이 실행되는 순간 변수가 만들어지고
			그 블럭을 벗어나면 그 변수는 사라지게 된다.
		
		예 ]
		
			class Test{
			
				int a = 10; 	//전역변수
				
				void abc(){
				  int b = 5;	//지역변수
				  System.out.println(a);
				  System.out.println(b);
				}
				
				
				void xyz(){
				  System.out.println(a); ------o
				  System.out.println(b); ------X
				}
			
			}
			
			
		
		
		전역변수
		==> 모든 지역 안에서 사용할 수 있는 변수
			클래스 안에서 만들어진 변수를 전역 변수라고 한다.
			왜냐하면 클래스 안에서 만드어진 변수는
			new 를 시키는 순간 Heap 영역에 만들어지기 때문에
			Heap 영역의 특성에 따라서 계속 사용 할 수 있게 되기 때문이다.
			
			탄생시점 	- new 시키는 순간.
			소멸시점	- 프로그램이 종료되는 순간
			
			
-------------------------------------------------------------------------------------------


