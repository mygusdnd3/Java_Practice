# day03

자바 프로그램의 토큰 구분
==> 컴파일러는 토큰 단위로 번역을 시도한다.
	따라서 개발자는 컴파일러가 번역을하는 토큰을 구분을 해줘야 한다.
	이것이 " ; " 이라는 기호를 이용해서 구분하게 된다.
	
	우리가 습관적으로
		int no = 10;
	이라고 작성한 이유가 토큰을 구분하기 위한 기호였다.
	
	*
	결론적으로 토큰이란 ?
	하나의 명령이 종료되었음을 알려주는 기호이다
	
	만약 개발자가 토큰 구분을 하지 않으면 오류가 날 수 있다.
	
	예 ]
		int a =10
		int b = 20;
		==> 컴파일러는 두줄을 하나의 명령으로 인식해서
			처리하게 되고 이러한 명령 형식은 존재하지 않으므로
			에러 처리가 발생하게 된다.
			
	예]
		int a= 10;int=b=20;
		==>비록 한줄로 작성은 했지만
		두개의 명령으로 인식하여 
		먼저
			int a = 10;
		만 컴파일 하고
			int b = 20;
		은 따로 컴파일 하게 되므로 안전하게 컴파일이 완성 될 수 있다
		
	참고 ]
		;대신 } 기호가 그 역할을 대신할 수 있다.
		
	예]
		if(조건식){ 
		} // 이 부분에서 토큰이 발생하게 된다.
		
		
--------------------------------------------------------------------------------------------

참고]
	키보드를 이용해서 데이터 입력받기
	(원칙적으로 이 부분은 OOP(객체지향프로그램)이론을 먼저 배워야
	완벽하게 이해할 수있다.
	
	1. class가 만들어지기 이전에
		
			import java.util.*;
				또는
			import java.util.Scanner;	
			
			이라는 명령을 이용해서 사용할 라이브러리를 등록한다.
			
	2. 프로그램에서 (주로 아직은 main함수에서)
	
		Scanner sc = new Scanner(System.in);
		
		이라는 명령을 이용해서 키보드를 통해서 입력 받을 도구를 준비한다.

		키보드를 통해서 입력받을 필요가 생기면...
		
		변수 = sc.nextXXX();
		명령을 이용해서 데이터를 입력 받으면 된다.
		이때 XXX는 입력받을 데이터의 종류에 따라 달라진다
			예]
				문자열을 입력받고 싶으면
				String str = sc.nextLine();
				
				정수를 입력 받고 싶으면
					int num = sc.nextInt();
					
				실수를 입력 받고 싶으면
					float no = sc.nextFloat();
				
				주의]
					입력 받고자 하는 타입이 아닌 문자열이 입력이 되면
					에러가 발생한다.
					
					예] 
						int no = sc.nextInt() ; // ==> "가나다"
						
						
	참고 ] 
	
		문자화된 숫자를 실제 숫자로 변환시키는 방법
		
		예 ]
			"123" ==> 보이게는 숫자처럼 보이지만 실제로는 문자열이다.
					  이것은 연산을 할 수 없는 상태이다.
			이것을 실제 연산이 가능한 숫자로 변환하는 방법
			
			
			int no = Integer.parseInt("123");
			
			
-----------------------------------------------------------------


상수와 변수

	I. 상수
		=> 개발자가 프로그램에게 알려주는 데이터(정보)
		
		예]
			system.out.println("hello")
			==> "hello"가 ㅅ아수이다
			
			문제 상수는 "리터럴 풀"이라는 장소에 일단 저장한 후
			사용되도록 되어있다.
			
		예]
			system.out.println("hello");
			라고 명령을 하면
				1) 먼저 "hello"라는 데이터를 리터럴 풀에 저장한다.
				2) 리터럴 풀에 있는 데이터를 꺼내서 출력하게 된다.
				
		
		종류 ]
			1) 정수형
				일반적인 소수점이 없는 숫자
					10	 : 10진수
					010  : 8진수		->8이라는 숫자
					0x10 : 16진수		->16이라는 숫자
					
				예]
					int no = 10;
					int no1 = 010;	->실제 기억되는 내용은 8이 기억된다
					int no3 = 0x10; - > 16으로 출력된다  (10진수로 변환)
					
			2) 실수형	
				소수점이 존재하는 숫자
					3.14	:일반적인 소수방식
					3.0e5	:지수방식
							=>3.0 곱하기 10의 5승
					0.25d-7	:0.25 곱하기 10의 -7승
					
			3) 논리형
				참과 거짓을 의미하는 데이터 
					true
					false
					--> 위의 두가지 외에는 절대로 논리형을 표현할 수 없다.
					
					boolean bool = true;		
		
			4) 문자형
				오직 한글자로만 구성된 문자를 의미한다.
				-> 내부적으로는 입력한 문자를 UniCode방식으로 변환하여 기억하게된다.
				
					'a'		    97 이 기억된다.
					'\u0000'	실제 유니코드 값으로 문자를 기억 할 수 있다.
								<== 0000은 원하는 문자의 해당 하는 UniCode값
			
			5) 문자열형		
				 한글자 이상으로 구성된 문자를 의미한다.
				 ==> 원칙적으로 이것은 기본 상수는 아니다.
				 	 개발자 입장에서 매우 빈번하게 사용하는 형태이므로
				 	 포함시켜 설명한다
				 	 
				 
				 "원하는 문자열"
				 
	II. 변수
	
		참고]
			변수의 필요성	
				: 개발자가 입력한 데이터는 일단 리터럴 풀에 저장된다.
					그리고 프로그램이 리터럴 풀에 있는 데이터를 꺼내서 사용하게 된다.
					
				리터럴 풀은
				주소를 모르면 사용할 수 없다.
				(반드시 주소를 알아야 사용할 수 있다.)
				
				변수는 리터럴 풀에 저장된 데이터를 개발자가 사용할 수 있는 영역에
				다시 저장해서 사용할 수 있도록 주소를 기억하는 방법이다. 
				
				그리고 개발자가 쉽게 사용할 수 있는 영역이 Stack 이다.
				
				
		참고]
			Stack의 특징
			
				1. 메모리에 별칭을 붙여서 사용할 수 있는 영역
					(별칭은 개발자가 붙이는 것이므로 개발자가 가장 쉽게 이용할 수 있는 영역)
				2. 8개의 영역 중에 리터럴 풀 다음으로 가장 작은 영역을 운영체제에게
					배정을 받는다.
					(따라서 Stack 에 많은 데이터를 보관하면 문제가 발생할 수 있다.)
					
------------------------------------------------------------------------------------------

	리터럴 풀의 데이터를 Stack에 기억 시키는 방법
	
		1. Stack에 필요한 메모리를 할당 받는다. 
		
			형식 ] 
				데이타입	변수이름;
				예]
					int		num;
					
			참고]
				변수이름은 위에서 설명한 Stack에 붙이는 별칭이다.
				따라서 이 변수 이름만 기억 하고 있으면 언제든지
				이 영역을 사용할 수 있게 된다.
				
		2. 대입(기억) 연산자를 이용해서 필요한 데이터의 주소를 기억 시킨다. 
		
			형식]
				변수이름	=	데이터 ;
			예]
					num 	=	10;
					
		참고]
		
			Stack영역에 메모리를 할당 받는 방법
			JVM에게 할당 받을 메모리의 크기와 그 안에 기억할 데이터 형태를 알려줘야한다.
			
			종류는 위에서 살펴본 리터럴(상수)타입..
			
			
------------------------------------------------------------

콘솔 화면에 출력하는 방법
	
	1. System.out.println()
		-> 출력한 후 자동으로 줄바꿈이 일어난다.
			ln은 Line Feed의 약자이다.
			
	2. System.out.print()
		-> 출력한 후 줄바꿈이 일어나지 않는다.
		
		1,2의 공통적인 특징은 한개의 데이터만 출력할 수있다.
		
	3. System.out.printf()
		-> 여러 데이터를 동시에 출력할 수 있다
			+ 데이터의 모양(출력형태)을 만들어 출력할 수 있다.
			
		참고] 
			이 함수는 C언어의 printf()의 것을 그대로 모방한 함수.
			
		형식]
		System.out.printf("%d(형식을 만드는 문자)", data1, data2.....);
		
		형식을 만드는 문자
		%d - 정수 값을 10진수로 출력
		%o - 정수값을 8진수로 출력
		%x - 정수값을 16진수로 출력
		%f - 실수값을 출력(소수방식)
		%e - 실수값을 출력(지수 방식)
		%c - 문자를 출력
		%s - 문자열을 출력
		%b - 논리값을 출력
		
		*
		위의 기호에는 숫자를 붙여 자릿수를 지정할 수 있다.
		
		예]
			%10d
				=> 10진수를 10자리에 맞추어 출력하세요
			%10.4f
				=> 실수를 10자리에 맞춰 출력하는데
					소수 이하는 4자리에 맞춰 출력하세요
					
		참고]
			위의 기호 이외의 내용은 문자열로 그대로 출력
--------------------------------------------------------------------

클래스 작성 형식
[]생략가능한부분
	[접근지정자] [속성] class 클래스이름{
		변수들..
		함수들..    맴버라 부른다
	}
함수작성 형식
	[
--------------------------------------------------------------------			
		
		
		