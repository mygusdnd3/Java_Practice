# day21

	2. ArrayList
			==> Vector의 신버전dmfh
				역시 배열의 형태로 데이터를 관리하기 때문에
				Vector의 특징을 그대로 가지게 된다.
				하지만 스레드에서 동기화 처리를 자동으로 해줌을
				요 사이는 Vector 보다는 ArrayList 를 선호하는 경향이 있다.
				
				
			사용방법은 Vector와 유사하다.
			
			참고 ] 
				List 계열의 주소를 출력하면
				마치 데이터가 나온것 처럼 보이지만
				이것은 toString() 를 오버라이딩 해 놓아서 출력만 될 뿐이다.
				절대로 데이터를 사용할 때는 반드시 하나씩 꺼내서 사용하도록 해야한다.
				
				
	3. LinkedList
			==> 내부적으로 이중 연결 리스트 방ㅅ기으로 데이터를 보관하는 방식의 컬랙션의 일종
			
			장점 ]
				데이터를 중간에 끼워넣기 작업, 삭제작업은 속도가 빠르다
				
			단점 [
				데이터를 누적 시키는 작업은 속도가 느리다.
				
			주로 데이터의 변화가 심한 경우에 많이 사용 된다.
			
-----------------------------------------------------------------------------------------------------------
Collections 클래스
 ==> 이 클래스는 이름은 컬렉션이지만, 컬렉션의 기능은 가지고 있지 않고(데이터 보관기능은없고)
 	컬렉션을 이용할 때 필요한 부가적인 기능을 제공하는 유틸리티 클래스이다.
 	
 	주의 ] 
 		List를 달라고 하면 List 계열을 주면 된다.
 		set 계열을 달라고 하면 Set 꼐열을 주면된다
 		collection을 달라고 하며 ㄴ List, Set 계열의 데이터를 주면 된다.
 		MAp의 경우에는 상위 클래스가 다르므로 같이 처리해주는것이불가능하고
 		Map 을 달라고 하면 Map 계열을 주면된다.
 		
 	참고 함수 ]
 		Collections.sort() = 컬렉션을 정렬해주는 함수
 			참고] 
 				만약 정렬방식을 변경하고자 하면
 				sort(List list, Comparator c)를 사용해야 한다. //Comparator 정렬방식을 변경하고자할때
 																//Comparable 비교가 안되는 클래스를 비교가능하게끔 만들어주는??
 																
 				
 	
