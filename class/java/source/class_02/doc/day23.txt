# day23

Properties
==> Map의 역할을 하는 클래스

	일반 Map과의 차이점은 파일(외부장치)을 이용해서 직접 데이터를 읽어서
	Map처럼 저장할 수 있고,
	Map에 저장된 데이터를 직접 파일(외부장치)로 출력해서 저장할 수 있다.
	
	주의사항 ]
	
		파일의 내용을 읽을 때 인코딩이 되지 않는다는 점이다.
		==> 한글 파일의 경우 파일 자체에서 인코딩을 하지 않으면
			내용이 한글일 경우 한글이 깨져서 들어온다.
			
		참고 ]
			
			한글이 포함된 파일을 properties에서 사용하기 위해서
			인코딩 시키는 방법
			
			1. cmd 창을 연다.
			2. path를 JAVA_HOME으로 잡아둔다 .
			3. native2ascii 기능을 이용해서 인코딩 해준다.
			
				형식 ]
					native2ascii d:\sample\sample.txt d:\sample\sample_ko.txt
					native2ascii 		읽을파일			저장할 파일
					
					
		참고 ]
			Properties 클래스는 오직 String 으로만 키값과 데이터를 처리해야 한다.
			
										
		참고 ]
			Properties 클래스는 또 하나의 특징을 가지고 있는데, 
			현재 프로그램의 정보를 Map으로 자동 처리하는 기능을 가지고 있다.							
			
			
---------------------------------------------------------------------------------------
제네릭스(Generics)
==> 컬렉션은 모든 형태의 데이터를 모두 입력 받을 수 있다.
		(Object 타입으로 자동 형변환이 되기때문에)
	하지만 실무에서는 한가지 형태로 입력 받는 것을 원칙으로 한다.
	그런데 꺼낼 대는 항상 강제 형변환을 해서 꺼내야 한다.
	즉, 한가지 형태로 결정해서 데이터를 입력해 놓았는데.
	꺼낼때는 자동 형변환이 일어나지 않기 땜누에 항상 강제 형변환을 해야 했다.
	
	제네릭스란
	==> 컬렉션에 입력하는 데이터를 미리 알려줌으로써
		꺼낼때 좀 더 편하게(강제 형변환 없이) 꺼낼 수 있도록 해 주는 것.
		
	형식 ]
	
		ArrayList<String> list = new ArrayList<String>();
		
	참고 ]
		반드시 컬렉션마다 모두 제너릭스로 선언을 해줘야 한다.
		
	참고 ]
		제너릭스는 전파되지 않는다. 만들때마다 선언해줘야한다. 
		하나의 컬렉션이 제너릭스가 선언이 되어있더라도
		그 컬렉션을 이용하는 다른 컬렉션은 제너릭스를 잊어버린다. 
		따라서
			새로운 컬렉션도 다시 제너릭스 선언을 해 줘야 한다.
			
	참고 ]
		특수한 제너릭스
			원래 제너릭스는 특정 클래스만 입력 받을 목적으로 사용된다. 
			
			형식 ]
				<? super 클래스이름>
					- 지정한 클래스 포함 상위 클래스 까지 허락 
						( 클래스 포하 상위클래스들 모두를 사용할 수 있다.)
				<? extends 클래스이름>
					- 지정한 클래스 포함 하위 클래스 허락
						( 클래스 포함해서 모든 하우 ㅣ클래스를 사용할 수 있다.)
						
				위 두 방법은 제너릭 선언을 하지 않은 것과 동일한 효과가있다?
				왜냐면 형변환을 해줘야 하기 때문에..