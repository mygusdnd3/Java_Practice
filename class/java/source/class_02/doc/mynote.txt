/*

	**각종 공식
		삼각형의 넓이는 : " + hight * bottom * 0.5);
		사각형의 넓이는 : " + hight * bottom);
		원 면적 area = rad * rad * PI
		원 둘레 arround = 2 * rad * PI;
	 
			
				Math.random() 으로 랜덤한 수 만들기
				
					(int) (Math.random() * (큰수 - 작은수 + 1) + 작은수)
			 */
---------------------------------------------------------------------------------------------------------------------------------------------------			 
			 
	컨트롤 시작 알트 화살표 = 통복사
	컨트롤 D 줄삭제
	컨트롤 쉬프트 +-  글자크기 키우고 줄이고.
	
	스위치 케이스에서는 내부적으로 연산자 처리해줌 switch(a)
	
---------------------------------------------------------------------------------------------------------------------------------------------------

**	소수 n번째 자리까지 반올림!!!!반올림!

	Math.round() 

Math함수의 round()함수는 실수의 소수점 첫번째 자리를 반올림하여 정수로 리턴시켜줍니다. 
하지만 이 메서드를 잘 활용하면 소수점 몇번째 자리까지 나타내는것도 가능합니다. 예를들어 33.777*100을 하면 3377.7가 되겠죠. 
여기서 round를 적용시키면 3378이라는 정수가 리턴될것입니다. 여기서 다시 100.0을 나눠주면 실수로 적용되어 나옵니다. (33.78이 나오게 됩니다.) 
소수점 둘째 자리까지 나타내고싶으시면 100.0을 곱하였다가 나눠주시면 되고 소수점 셋째 자리까지 나타내고싶으시면 1000.0을 곱하였다가 나눠주면 됩니다. 
(참고로 반올림이 아닌 올림을 하고싶다면 Math.ceil(); 버림은 Math.floor();입니다.)



Math.round() 예제

double pie = 3.14159265358979;
System.out.println(Math.round(pie)); //결과 : 3
System.out.println(Math.round(pie*100)/100.0); //결과 : 3.14
System.out.println(Math.round(pie*1000)/1000.0); //결과 : 3.142
---------------------------------------------------------------------------------------------------------------------------------------------------
(String.format("%.6f", p))		
		
		ing.format()방식을 활용한 방법도 있습니다. String클래스의 format 메소드는 리턴되는 문자열 형태를 지정하는 함수인데 이 함수를 활용하면 
		Math.round() 함수와 같이 소수점 n번째 자리까지 반올림하여 나타낼 수 있습니다.



String.format() 예제
		
		double pie = 3.14159265358979;
		double money = 4424.243423;
		System.out.println(String.format("%.2f", pie)); //결과 : 3.14
		System.out.println(String.format("%.3f", pie)); //결과 : 3.142
		System.out.println(String.format("%,.3f", money)); //결과 : 4,424.243
		
---------------------------------------------------------------------------------------------------------------------------------------------------
		
		 System.arraycopy(#1, #2, #3, #4,#5);
				 
				 	#1 - 원본 데이터의 주소
				 	#2 - 원본 데이터에서 복사를 시작할 위치
				 	#3 - 복사 받을 배열의 주소
				 	#4 - 복사 받을 주소의 시작 위치
				 	#5 - 복사 받을 데이터의 갯수
				 	
---------------------------------------------------------------------------------------------------------------------------------------------------				 	
				 	
				 		Test라는 클래스가 존재한다면..
		
		Test t;; //변수 선언. 이 변수는 래퍼런스변수가 된다. 이 변수의 Heap Type은 Test 타입이 된다.
		
		t = new Test();
			// new 명령을 통해서 클래스가 Object가 되는데
			// 컴퓨터가 물건을 만든다는 개념
			// ==> 메모리에 클래스를 올린다.
			
		둘을 합쳐보면
		
			Test t	    =	 new Test();
			레퍼런스 	+	 인스턴스			= Object
		
		
		
		참고 ] 
		클래스 하나당 오브젝트는 복수개 만들어도 상관없다
		
		
		소스파일 하나당 클래스 1개가 원칙이다.
		1개의 소스파일에 
		다수의 class를 쓸경우 public 을 쓸수있는건 main이 있는 클래스뿐이다.
		
		
		클래스타입은 기본형 타입이 아니기때문에
		초기화가 되어있징낳다 얘] int[] 0000
		고로 크래스[i] 초기화를 for문을 돌면서 초기화해줘야한다
		
		각 방용 인스턴스를 만들어준다. 각 방에 각각의 개체를 초기화해준다
		왜냐면 주소하나만 해버리면 다 한군데만 쳐보고있어서 값이 죶같이된다.
		
		
		
			int cno = JOptionPane.showConfirmDialog(main.f, "프로그램을 종료할까요?","##프로그램 종료 ##", JOptionPane.YES_NO_CANCEL_OPTION);
		// yes = 0 , no = 1 cancel = 2 반환
		
		
		
		//ColorPick 초기화
		cPick = new ColorPick(this); //ColorClass의 "주소"만 넘겨줌
		this로 받았은 곳에서는 main의 주소의 값에 접근이 가능하다.
		