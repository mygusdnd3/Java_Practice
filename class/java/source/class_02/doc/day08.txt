#day08

# 배열의 복사
	1. 얕은 복사	 
		=> 주소만 복사해 주는 방법.
		
			특징 ]
				데이는 공유하므로 한 곳에서 수정하면
				다른 곳에서도 수정된 내용을 사용하게 된다.
				
			방법]
			
				int[] a = new int[5];
				.....// 배열 채우고
				
				int[] b;
						=> 배열 주소를 기억할 변수를 만들어 주는 작업
							b 안에는 데이터는 기억할 수 없고.
							오직 주소만 기억할 수 있다.
							
				 b = a;
				 		
				 		
				 ** 
				 참고 ] 
				 	얕은 복사는 지역 변수는 그 지역에서만 활동하므로
				 	다른 지역에서 Heap 영역의 데이터를 사용할 목적으로 많이 사용되는 기법 
				 	
	2. 깊은 복사
		=> 데이터까지 모두 복사해 주는 방법
			=> 데이터가 복사 되었다는 것은.
				Heap 영역에 다른 곳에 데이터가 한번 더 존재한다는 것이므로 
				데이터 주소가 달라지게 되므로 
				특징 ] 
					복사된 데이터는 독립적으로 사용되게 된다.
						
			방법  ]
				1. 반복해서 데이터 꺼내서 채우는 방법.
				2. 이미 만들어서 배포하는 메소드를 사용하는 방법.
				 System.arraycopy(#1, #2, #3, #4,#5);
				 
				 	#1 - 원본 데이터의 주소
				 	#2 - 원본 데이터에서 복사를 시작할 위치
				 	#3 - 복사 받을 배열의 주소
				 	#4 - 복사 받을 주소의 시작 위치
				 	#5 - 복사 받을 데이터의 갯수
				 	
------------------------------------------------------------------------------
배열의 단점

	1. 한번 배열의 크기를 정하면 크기 조저이 불가능 하다.
		
		예 ]
			int[] num = new int[10];
			// 데이터를 10개를 관리할 예정이다.
			
			// 이때 데이터가 하나더 필요하다면 ?
			// 원칙적으로는 불가능하다.
			// 해결 방법은깊은 복사로 복사하는 방법이다.
			
	2. 같은 형태의 데이터만 관리할 수 있다.
		=> 주소는 Heap 타입에 의해서 결정되고
			Heap 타입이 다르면 사용할 수 없다 
			
			예 ] 
			
				int[] no1 = new int[10];
				float no2 ;
				no2 = no1; // 에러
				
----------------------------------------------------------------------

문자열 배열 ( String 배열)
	참고]
		String 역시 참조형 변수(주소 변수)이다.
		
			String str = new String("abcd");
			
			이라고 변수를 만들게 되면
			str 속에는 주소가 기억이 되고
			데이터는 리터럴 풀에 기억이 된다.
			
	참고 ]
		참조형 변수 (Reference Variable) 이란 ?
		주소를 기억하는 변수
		하지만 프로그램에서는 주소는 필요하지 않다.
		오직 데이터가 필요할 뿐이다.
		따라서 참조형 주소 변수는 데이터가 존재하는 위치를 알려줄 뿐이고
		핵심은 데이터가 들어갈 메모리, 실제 데이터가 더 중요 하다.
		
	문자열(String) 배열 만들기 
		
		String[] str;
		str = new String[5];
		 => 이렇게 하면 데이터가 완성되지 않았으므로
		 
		 str[0] = "abcd";
		 str[1] = "efgh";
		 .......
		 
		 과 같이 데이터 공간까지 만들어야 한다.
		 
		 String 배열도 초기화가 가능하다.
		  < = 변수를 선언과 동시에 초기화 하는 경우..
		  
		  String[] str = {"abcd","efgh","ijkl""mn","opq"};
		  
-------------------------------------------------------------------------

참고 ] 
	문자열(String) 은 필요에 따라서 문자(char) 배열 형태로 변환해서 사용한다.
	
	
	함수 ]
	
		String.toCharArray();
		
	예]
		String str = "abcde";
		
		char[] ch = str.toCharArray();
		==>
			ch[0] : 'a'
			ch[1] : 'b'
			ch[2] : 'c'
			....
			
		참고]
			문자열(String) 에서 자주 사용하는 함수
			
				1.	charAt(위치) - 해당 위치의 문자를 반환해주는 함수.
				2.  length()	 - 문자열의 길이(문자열을 이루는 문자의 갯수)를 알려준다
				3.  indexOf(문자 | 문자열) - 문자열에서 입력하는 문자 혹은 문자열의 위치값을 알려준다.
				4.  substring()	 - 문자열 중에서 원하는 문자열만 따로 추출해주는 함수
				
					형식 1] 
						substring(시작위치)
						==> 시작 위치 부터 마지막까지 꺼내준다.
						
					형식 2]
						substring(시작위치, 종료위치)
						==> 시작위치부터 종료위치 전까지 꺼내준다. 종료위치 포함안됨
						
					* 주의
					시작 위치는 0부터 시작
					종료 위치는 포함시키지 않는다.
					
				5. equals()
					=> 문자열의 데이터가 같은지 비교하는 함수
					
					형식 ]
					문자열1.equals(문자열);
					==> 문자열1과 문자열 2의 데이터가 같은지 비교해서
						true false로 반환 / 결과는 논리값으로 반환해준다.
						
		****
		참고 ] 
		
			문자열 데이터는 변경 불가능한 데이터이다.
							