# day15

*****
다형성(多形性)
==> 하나의 변수를 이용해서 여러 형태의 클래스를 사용하도록 하는 기법.
	단, 상속 관계에 있는 클래스에 한해서 하는 이야기..
	
	주소의 형변환(Casting)
	==> 원칙적으로 주소는 다른 형태로 형 변환이 불가는 하다.
		즉, 주소는 Heap 형태에 따라 주소가 결정이 되므로
		Heap 형태가 다르면 주소를 기억할 수 없다.
		
			int[] no = new float[10];-----------x
			
			
			*****
			그런데 딱 한가지 경우에 한해서 주소의 형 변환이 가능하다.
			상속관계에 있는 클래스 끼리는 형변환이 가능하다.
			왜??
			is a 관계이기 때문에..
			
				자동 형변환
					하위 클래스의 주소(하위클래스의 인스턴스를 만들었을때)가
					상위 클래스의 변수에 기억되는 것은
					자동적으로 형 변환을 해준다. 
				
				강제 형변환
					상위 클래스의 주소가 하위 클래스 변수에 기억되는 것은
					원칙적으로 불가능 하다.
					
					강제로 형변환을 해줄 수는 있다.
					
					
				예 ]
				
					class Father{
					
					}
					
					class Son extends Father{
					
					}
					class Son1 extends Father{
					
					}
					class Son2 extends Father{
					
					}
					son s = new Son(); ---------- o
					
					Father f = s; ----------------o (자동 형변환)
					
					Father f = new Father();
					Son s = f --------------------X
					son s = (Son)f; --------------o  (강제 형변환)
					
			다형성이란??
			
				주소의 형변환 이론을 기반으로 하여
				상위 클래스의 주소를 이용해서 하위 클래스를 이용할 수 있으며
				이 말은 
				상위 클래스의 주소를 이용하면
				여러 하위 클래스를 다룰 수 있다.	
				예 1]
					Father f = new Son();
					f = new Son1();
					f = new Son2();
					
				예 2]
				class Grand{}
					class Father extends Grand{	}
					class Son extends Father{}
					class GrandSon extends SOn{]
					
					GrandSon gs = new GrandSon();
					
					Grand g = gs;
					Father f = gs;
					Son s = gs;
					
			개발자 입장에서 다형성이란
			
				상위 클래스의 변수를 이용하면 하위 클래스를 사용할 수 있다.
				따라서
				상위 클래스의 변수를 이용해서 하위클래스를 받아서 사용하면 된다.
				
				만약 어떤 함수가 Object를 매개 변수로 가지고 있으면
				Object를 주는 경우는 없다.
				대신 이 매개변수의 의미는
				Object 클래스는 자바에서 최상위 클래스이므로
				모든 타입의 데이터를 입력해도 된다. 라는 의미가 된다.
				
				어떤 함수가 상위 클래스를 반환값으로 가지고 있으면..
				반드시 원하는 하위 클래스 형태로 형변환 해서 사용해야 한다.
				
				예 ]
					A											abc();
					|--------------------------------|
					|	|	|	|	|...
					B	C	D	E	...
					
					public void abc( A a){
					a.xyz();
					}
					
					B 데이터를 입력해 줘야 하는경우
					B b = new B();
					abc(b); // A a = > b;  --자동형변환
					a.xyz();  --b에서 재정의 한 함수가 호출, 함수는 인스턴스쪽
					
-------------------------------------------------------------------------------------------------------

추상 클래스 (Abstract Class)
==> 추상 함수를 0개 이상 가지고 있는 클래스 
	따라서 추상 함수가 없어도 강제로 추상 클래스를 만들 수 있고,
	추상 함수가 한개라도 있으면 반드시 추상 클래스로 만들어야 한다. 
	
	추상함수란?
	==> 
		함수의 몸체 {} 블럭 가 없는 함수를 이야기 한다.
		즉, 몸체가 없다는 이야기는 기능이 없는 함수를 이야기 한다.(아직 정해지지 않은 함수..)
		--> 이 함수는 C 언어에서의 가상 함수에 해당하는 것이다.
		
		형식	]
			[접근지정자] abstract  반환값타입 함수이름(매개변수리스트);


		예	]
		
			public abstract void abc(int a);

		
		
		추상 클래스를 만드는 방법
		
			형식 	]
				[접근지정자]	abstract 	class	클래스 이름{
					변수
					일반함수
					[추상함수]
				
				}
				
				왜??
					다형성 구현을 하기 위해서..
					
		추상클래스를 사용하는 방법
		==> 추상클래스는 스스로 new 시킬 수 없다.
			왜냐면 그 안에는 기능이 없는 함수가 존재할 수 있기 때문에..
			
			사용방법
				1. 다른 클래스에서 상속을 해준 후
					추상 함수의 기능을 만들어 주고(추상함수의 블럭을 만들어서 내용을 채워준다 : 오버라이드)
					하위 클래스를 new 시키고 사용 하면 된다.
					==> 실무에서 이렇게 사용하는 경우는 10%미만..		
			
				2. 추상클래스 안에는
					속성이 static 이고 반환값 타입이 자기 자신인 함수가 있으면
					그 함수를 호출해서 사용하면 된다.
					
					
			예	]
			
				Calender c new Calender(); ---------------------X
				Calender c = Calender.getInstance(); -----------O
				
				
		참고 ]
			추상클래스가 아님에도 불구하고
			생성자 함수가 존재하지 않는 클래스가 있다.
			이 클래스는 생성자 함수가 없는 것이 아니고
			생성자 함수를 private로 감춰 놓은 것 이므로(은닉화)
			역시 new 시켜서 사용할수없다.
			이런 클래스 역시 
				속성이 static 이고
				반환값 타입이 자기 자신인 
			함수를 이용해서 처리해 주면 된다.



----------------------------------------------------------------------------------


인터페이스 (Interface)
==> 클래스의 한 종류이긴 하지만
	약간 그 형태나 의미가 다른 특수한 클래스이다

	1. 최상위 클래스가 Object 가 아니다.
		==> 즉, 인터페이스는 다른 클래스를 상속받아서 만들어진 클래스가 아니다.
		
	2. 반드시 내부에 100% 추상 함수가 존재 해야 한다.
		==> 절대로 일반 함수는 존재하지 않는다
			==> 기능을 가진 함수가 존재하면 안된다.
			
		참고 ]
			추상함수
				==> abstract 송성을 기술하지 않아도
					인터페이스에서는 자동적으로 abstract 속성이 붙게된다.
					
	3. 인터페이스는 다른 클래스에 상속할 수 있는데(해줘야하는데)
		다중 상속이 가능하다.
		
	4. 변수는 가질 수 있다.
		이 변수는 묵시적으로
			public static final 변수가 된다.
			
	5. 인터페이스 소속 함수는 묵시적으로 public 함수가 된다.
	
	
		만드는 방법 ]
		
			[접근지정자] interface 인터페이스이름 {
				변수 - 자동적으로 public static final 변수가 된다.
				함수 - 자동적으로 public abstract 함수가 된다(몸체없음)
			}
			
		
		이런걸 왜 만들어뒀나?
		
		=>> 가끔은 JVM에 의해서 자동으로 호출되야아 하는 함수가 필요하다.
		따라서 함수의 존재는 필요한데
		하지만 가끔은 이 함수가 해야할 일을 정의 못하는 경우도 생길 수 있다.
		==> 상속받아서 구현해야 하는 경우가 생길 수 있다.
		따라서 기능은 개발자의 몫으로 남긴 것이 된다. 
		(추상클래스마냥 개발자가 처리해라)


	인터페이스 사용하기 ]
	
		1. 인터페이스는 스스로 new 되지 못한다.
			이유는 추상 클래스와 마찬가지로 몸체가 없는 함수가 존재하기 때문이다.
			
			따라서 인터페이스는 일반 클래스에 상속을 해준다.
			
		상속방법	]
			[접근지정자] [속성] class 일반클래스이름 implements 인터페이스이름{
		
			}
			
			참고 ]
				일반클래스를 상속 받는 것을 "상속"이라고 표현하고
				인터페이스를 상속 받는 것을 "구현 이라고 표현한다.
				
				
			구현하는 클래스에서는 인터페이스 안에 존재하는 함수(추상함수)들을
			모두 몸체를 만들어 줘야 한다.(직접 구현해줘야한다)
		** 필요한 기능은 개발자가 구연하면 된다.
		==> 인터페이스 소속 함수는 자동적으로 접근지정자가 public이다
			
			구현된 일단 클래스를 new 시켜서 사용한다.
			==> 이 방법이 인터페이스 사용 방법의 90%를 차지한다.

		2. 드문 경우로 반환값이 인터페이스타입이면서 속성이 static인 함수가
			다른 클래스에 있는 경우가 있다.
			이때 그 함수를 호출해서 객체를 만들어 사용하면 된다.
			
			
	참고 ] 
		인터페이스는 다중 상속이 가능하다.
		클래스는 단일 상속만 가능하다.
		
		
		형식 ]
			[접근지정자] [속성] class 클래스이름 implements 인터페이스1, 인터페이스2,...{
			
			}
		주의사항]
			구현하는 인터페이스들의 추상 함수를 모두 구현해야 한다.

	참고 ]
	
		인터페이스를 클래스 상속과 동시에 사용하는 경우
		
		형식]
		
			[접근지정자] [속성] class 클래스이름 extends 상속받을클래스이름 implements 인페이스1,2,3,4,{
			}
			
				주의사항 ]
					*반드시 extends가 먼저 와야 하고
					*implements 가 나중에 와야 한다.
			
-------------------------------------------------------------------------------------------------------------------
참고 ]
	**인터페이스**도 **다른 인터페이스**를 ''상속'' 받아서 만들 수 있다.
	
	형식 ] 
		[접근지정자] interface 인터페이스이름 extends 인터페이스 이름{
		}
		참고]
			인터페이스가 인터페이스를 상속 받을 경우에는
			implements가 아니고 extends를 사용한다.
			
참고 ]
	인터페이스 내부에도 일반 함수가 올 수 있다.
	이 경우는 반드시 함수의 속성을 default 라고 명시 해주어야 한다. //(인터페이스 소속 함수는 묵시적으로 public 함수가 된다.)
	
	형식 ] 
		default 반환값타입 함수이름(매개변수리스트){
			함수내용
		}

-------------------------------------------------------------------------------------------------------------------









					